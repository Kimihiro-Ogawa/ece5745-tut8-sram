#=========================================================================
# SRAM RTL with custom low-level interface
#=========================================================================
# This is the SRAM RTL model with our own low-level interface. It contains
# an instance of either a SRAM generated by CACTI memory compiler or a
# This is the SRAM RTL model with our own low-level interfacegeneric
# SRAM RTL model (SramGenericPRTL).
#
# The interface of this module are prefixed by port0_, meaning all reads
# and writes happen through the only port. Multiported SRAMs have ports
# prefixed by port1_, port2_, etc.
#
# The following list describes each port of this module.
#
#  Port Name     Direction  Description
#  -----------------------------------------------------------------------
#  port0_val     I          port enable (1 = enabled)
#  port0_type    I          transaction type, 0 = read, 1 = write
#  port0_idx     I          index
#  port0_wdata   I          write data
#  port0_wben    I          write byte enable (1 = enabled)
#  port0_rdata   O          read data output
#

from pymtl           import *
from SramGenericPRTL import SramGenericPRTL
from SRAM_32x256_1P  import SRAM_32x256_1P
from SRAM_128x256_1P import SRAM_128x256_1P

# ''' TUTORIAL TASK '''''''''''''''''''''''''''''''''''''''''''''''''''''
# Import new SRAM configuration RTL model
# '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

class SramPRTL( Model ):

  def __init__( s, num_bits = 32, num_words = 256 ):

    idx_nbits = clog2( num_words )      # address width
    nbytes    = int( num_bits + 7 ) / 8 # $ceil(num_bits/8)

    s.port0_val   = InPort ( 1 )
    s.port0_type  = InPort ( 1 )
    s.port0_idx   = InPort ( idx_nbits )
    s.port0_wdata = InPort ( num_bits )
    s.port0_wben  = InPort ( nbytes )
    s.port0_rdata = OutPort( num_bits )

    # Inverters

    s.port0_val_bar  = Wire( 1 )
    s.port0_type_bar = Wire( 1 )

    @s.combinational
    def inverters():
      s.port0_val_bar.value  = ~s.port0_val
      s.port0_type_bar.value = ~s.port0_type

    # if you have implemented a new SRAM, make sure use it
    # here instead of the generic one.

    if   num_bits == 32 and num_words == 256:
      s.sram = m = SRAM_32x256_1P()
    elif num_bits == 128 and num_words == 256:
      s.sram = m = SRAM_128x256_1P()

    # ''' TUTORIAL TASK '''''''''''''''''''''''''''''''''''''''''''''''''
    # Choose new SRAM configuration RTL model
    # '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    else:
      s.sram = m = SramGenericPRTL( num_bits, num_words )

    s.connect( m.CE1,  s.clk            )
    s.connect( m.CSB1, s.port0_val_bar  ) # CSB1 low-active
    s.connect( m.OEB1, 0                )
    s.connect( m.WBM1, s.port0_wben     )
    s.connect( m.WEB1, s.port0_type_bar ) # WEB1 low-active
    s.connect( m.A1,   s.port0_idx      )
    s.connect( m.I1,   s.port0_wdata    )
    s.connect( m.O1,   s.port0_rdata    )

